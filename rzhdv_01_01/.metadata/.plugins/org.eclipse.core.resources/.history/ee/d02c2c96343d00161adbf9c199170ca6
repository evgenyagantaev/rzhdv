#include "adas1000_get_save_frame.h"
#include "spi_low_level.h"
#include "gpio.h"

/**
  * @brief EXTI line detection callback.
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
    if(GPIO_Pin == drdy_adas_exti9_Pin)
    {
    	new_frame_ready_flag = 1;

    }
}

// message - massiv uint32_t slov soobscheniya, v kotoryh nas interesuyut mladshie 3 baita
// length - dlina soobsheniya (v uint32_t slovah)
uint32_t crc_calculation(uint32_t *message, int length, uint32_t polynomial, uint32_t preset, uint32_t extension)
{
	int i, j;

	uint32_t mask = 0x00ffffff;
	uint32_t crc_register;
	uint32_t crc_pred_register;

	//preliminary actions *****************************
	// load register with preset value (all ones)
	crc_register = preset;

	// expand message with zeros (on the right end)
	message[length] = extension;

	// crc calculation loop ***************************
	for(i=0;i<(length+1);i++)
	{
		// load pred register with next word of message
		crc_pred_register = message[i];

		// shift-xor loop
		for(j=0; j<24;j++)
		{
			crc_register <<=1;
			crc_pred_register <<=1;

			if((crc_pred_register & msb_mask) != 0)
				crc_register += lsb_mask;
			if((crc_register & msb_mask) != 0)
				crc_register ^= CRC_POLYNOM;
		}
	}

	// zero ms byte
	crc_register &= (uint32_t)0x00ffffff;

	return crc_register;

}


// returns crc of frame
uint32_t read_frame(uint32_t *frame_buffer)
{
	uint32_t return_value = 0;

	int i;
	for(i=0; i<17; i++)
	{
		frame_buffer[i] = 0;
	}
	frame_buffer[11] = 0x55555555;

	synchronize();

	wait_for_drdy();

	// check if new fame ready flag is up
	//if(new_frame_ready_flag)
	if((drdy_adas_exti9_GPIO_Port->IDR & drdy_adas_exti9_Pin) == GPIO_PIN_RESET)
	{
		new_frame_ready_flag = 0;

		// check if drdy pin is low right now
		if((drdy_adas_exti9_GPIO_Port->IDR & drdy_adas_exti9_Pin) == GPIO_PIN_RESET)
		{
			// read register 0x40 (frame header), initiate frame reading
			write_4byte_word(((uint32_t)0x40) << 24);
			frame_buffer[0] = read_4byte_word();
			// read frame in loop
			for(i=1; i<12; i++)
			{
				frame_buffer[i] = read_4byte_word();
			}

			// check crc
			uint32_t crc_received = frame_buffer[11];
			crc_received = (~crc_received) & 0x00ffffff;
			return_value = crc_calculation(frame_buffer, 11, CRC_POLYNOM, ALL_ONES, ALL_ZEROS);
			//return_value = ~return_value;
			//frame_buffer[11] = return_value;
			//return_value = crc_calculation(frame_buffer, 12, CRC_POLYNOM, ALL_ONES, ALL_ZEROS);

			return_value = ~return_value;
		}
	}

	return return_value;
}

