/*
 * isoline.c
 *
 *  Created on: Sep 5, 2016
 *      Author: root
 */

#include <isoline.h.old>
#include "stddef.h"


//********************************************************************
// function adds samples in cyclic and sorted buffers
void addSampleInBuffer(uint16_t sample)
{

	int jobIsDone = 0;
	int endOfListReached = 0;
	SortedBufferList *pointer;

   // move head element to the tail
   samplesBufferTail->next = samplesBuffer;
   samplesBuffer = samplesBuffer->next;
   samplesBufferTail = samplesBufferTail->next;
   samplesBufferTail->next = NULL;
   // save new sample value
   samplesBufferTail->sample = sample;
   // remove element from sorted buffer
   if ((samplesBufferTail->sorted)->previous != NULL)
	   (samplesBufferTail->sorted)->previous->next = (samplesBufferTail->sorted)->next;
   else
	   sortedBuffer = (samplesBufferTail->sorted)->next;
   if ((samplesBufferTail->sorted)->next != NULL)
	   (samplesBufferTail->sorted->next)->previous = (samplesBufferTail->sorted)->previous;
   (samplesBufferTail->sorted)->previous = NULL;
   samplesBufferTail->sorted->next = NULL;
   // add element in sorted buffer
   samplesBufferTail->sorted->sample = sample;


	   pointer = sortedBuffer;

   while (!jobIsDone && !endOfListReached)
   {
	   if (sample < pointer->sample)
	   {
		   if (pointer != sortedBuffer) // less then minimal
		   {
			   pointer->previous->next = samplesBufferTail->sorted;
			   samplesBufferTail->sorted->previous = pointer->previous;
		   }
		   else
		   {
			   sortedBuffer = samplesBufferTail->sorted;
		   }
		   samplesBufferTail->sorted->next = pointer;
		   pointer->previous = samplesBufferTail->sorted;

		   jobIsDone = 1;
	   }
	   else
	   {
		   if (pointer->next != NULL)
		   {
			   pointer = pointer->next;
		   }
		   else
		   {
			   endOfListReached = 1;
		   }

	   }
   }



   if (endOfListReached) // greater then maximal
   {
	   // add to the tail
	   pointer->next = samplesBufferTail->sorted;
	   samplesBufferTail->sorted->previous = pointer;
   }

}
//********************************************************************
// end addSampleInBuffer


// function computes isoline value
uint16_t computeIsoline()
{
   // cut edge values of sorted buffer
   SortedBufferList *pointer = sortedBuffer;

   for (int i = 0; i < SAMPLESTOCUT; i++)
   {
	   pointer = pointer->next;
   }
   // compute average
   int average = 0;
   for (int i = 0; i < (BUFFERLENGTH - 2 * SAMPLESTOCUT); i++)
   {
	   average += pointer->sample;
			   pointer = pointer->next;
   }


   return (uint16_t)(average / (BUFFERLENGTH - 2 * SAMPLESTOCUT));
}// end computeIsoline()


// public constructor
void isoline_constructor()
{
  // turn off active mode
  activeMode = 0;

  //***************************************************************
  //create and init buffers:

  // create first element
  samplesBuffer = (BufferList *)malloc(sizeof(BufferList));
  // create first element
  sortedBuffer = (SortedBufferList *)malloc(sizeof(SortedBufferList));
  sortedBuffer->previous = NULL;
  bufferPointer = samplesBuffer;
  sortedBufferPointer = sortedBuffer;

  for (int i = 0; i < BUFFERLENGTH; i++)
  {
	  bufferPointer->sample = i;
	  sortedBufferPointer->sample = i;
	  bufferPointer->sorted = sortedBufferPointer;

	  if (i != (BUFFERLENGTH - 1))
	  {
		  bufferPointer->next = (BufferList *)malloc(sizeof(BufferList));
		  sortedBufferPointer->next = (SortedBufferList *)malloc(sizeof(SortedBufferList));
		  if (i != 0)
		  {
			  sortedBufferPointer->next->previous = sortedBufferPointer;
		  }
		  bufferPointer = bufferPointer->next;
		  sortedBufferPointer = sortedBufferPointer->next;
	  }
  }
  // set pointer to the tail of buffer
  samplesBufferTail = bufferPointer;
  // write NULL as a value of "next" field of last element
  bufferPointer->next = NULL;
  sortedBufferPointer->next = NULL;

  //end create and init buffers
  //***************************************************************

}// end clsIsolineController() (public constructor)

// function updates isoline level and returns current fresh value of isoline level
uint16_t getIsoline(uint16_t newSample)
{
  addSampleInBuffer(newSample);
  currentIsoline = computeIsoline();
  return currentIsoline;
}
