/**
  ******************************************************************************
  * File Name          : main.c
  * Description        : Main program body
  ******************************************************************************
  *
  * COPYRIGHT(c) 2016 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "globals.h"
#include "stm32l4xx_hal.h"
#include "cmsis_os.h"
#include "adc.h"
#include "crc.h"
#include "iwdg.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "usb_device.h"
#include "gpio.h"

#include "spi_low_level.h"

/* Private variables ---------------------------------------------------------*/

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;
SPI_HandleTypeDef hspi1;

osThreadId green_led_thread_handle;
osThreadId red_led_thread_handle;
/* Private variables ---------------------------------------------------------*/


/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
extern void MX_FREERTOS_Init(void);

static void green_led_thread(void const *argument);
static void red_led_thread(void const *argument);
/* Private function prototypes -----------------------------------------------*/


int main(void)
{

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* Configure the system clock */
  SystemClock_Config();

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_CRC_Init();
  MX_IWDG_Init();
  MX_SPI1_Init();
  MX_TIM1_Init();
  MX_TIM2_Init();
  MX_TIM3_Init();
  MX_ADC1_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();


  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();

    // off both of leds
    HAL_GPIO_WritePin(GPIOA, red_led_odrain_Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(GPIOA, green_led_odrain_Pin, GPIO_PIN_SET);

    // configure adas 1000

    // on green led
    HAL_GPIO_WritePin(GPIOA, green_led_odrain_Pin, GPIO_PIN_RESET);
    // turn on spi and send 0x55
    
    // adas reset high
    HAL_GPIO_WritePin(GPIOA, reset_adas_Pin, GPIO_PIN_SET);

    // enable spi1
    SPI1->CR1 |= SPI_CR1_SPE;
    // set chipselect low (start spi communication)
    HAL_GPIO_WritePin(GPIOA, spi1_chipsel_Pin, GPIO_PIN_RESET);
    while(1)
    {

		long i;
		
        write_4byte_word((((uint32_t)0x0a) << 24));
        //read_4byte_word();
        
    }

    /*
    while(1)
    {
        //HAL_GPIO_WritePin(disco_green_led_out_GPIO_Port, disco_green_led_out_Pin, GPIO_PIN_RESET);
        //HAL_GPIO_WritePin(disco_red_led_out_GPIO_Port, disco_red_led_out_Pin, GPIO_PIN_SET);
        //HAL_Delay(100);
        //HAL_GPIO_WritePin(disco_red_led_out_GPIO_Port, disco_red_led_out_Pin, GPIO_PIN_RESET);
        //HAL_GPIO_WritePin(disco_green_led_out_GPIO_Port, disco_green_led_out_Pin, GPIO_PIN_SET);
        //HAL_Delay(100);

        HAL_GPIO_WritePin(GPIOA, green_led_odrain_Pin, GPIO_PIN_RESET);
        HAL_UART_Transmit(&huart2, "green on\r\n", strlen("green on\r\n"), 500);
        //HAL_GPIO_TogglePin(GPIOA, extern_watchdog_Pin);
        HAL_Delay(500);
        HAL_GPIO_WritePin(GPIOA, green_led_odrain_Pin, GPIO_PIN_SET);
        HAL_UART_Transmit(&huart2, "green off\r\n", strlen("green off\r\n"), 500);
        //HAL_GPIO_TogglePin(GPIOA, extern_watchdog_Pin);
        HAL_Delay(2000);
    }
    */


    osThreadDef(green_led, green_led_thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
    green_led_thread_handle = osThreadCreate(osThread(green_led), NULL);
    osThreadDef(red_led, red_led_thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
    red_led_thread_handle = osThreadCreate(osThread(red_led), NULL);
    //osThreadDef(_led, green_led_thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);


    /* Start scheduler */
    osKernelStart();
  
  /* We should never get here as control is now taken by the scheduler */
  while (1)
  {
      HAL_GPIO_WritePin(disco_green_led_out_GPIO_Port, disco_green_led_out_Pin, GPIO_PIN_RESET);
      HAL_GPIO_WritePin(disco_red_led_out_GPIO_Port, disco_red_led_out_Pin, GPIO_PIN_SET);
      HAL_Delay(100);
      HAL_GPIO_WritePin(disco_red_led_out_GPIO_Port, disco_red_led_out_Pin, GPIO_PIN_RESET);
      HAL_GPIO_WritePin(disco_green_led_out_GPIO_Port, disco_green_led_out_Pin, GPIO_PIN_SET);
      HAL_Delay(100);
  }

}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);

  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  HAL_RCCEx_EnableMSIPLLMode();

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
}

static void green_led_thread(void const *argument)
{
    uint32_t count;

    while(1)
    {
        count = osKernelSysTick() + 1000;

        /* Toggle led every 200 ms for 1 s */
        while (count >= osKernelSysTick())
        {
            HAL_GPIO_TogglePin(GPIOA, green_led_odrain_Pin);
            //HAL_GPIO_TogglePin(GPIOA, extern_watchdog_Pin);
            osDelay(200);
        }

        /* Turn off led */
        HAL_GPIO_WritePin(GPIOA, green_led_odrain_Pin, GPIO_PIN_SET);
        uint8_t message[] = "Hello from green led thread\r\n";
        HAL_UART_Transmit(&huart1, message, strlen((const char *)message), 500);

        osDelay(500);
        //HAL_GPIO_TogglePin(GPIOA, extern_watchdog_Pin);
        osDelay(500);
        //HAL_GPIO_TogglePin(GPIOA, extern_watchdog_Pin);


    }
}


static void red_led_thread(void const *argument)
{
    uint32_t count;

    while(1)
    {
        count = osKernelSysTick() + 2000;

        /* Toggle led every 400 ms for 2 s */
        while (count >= osKernelSysTick())
        {
            HAL_GPIO_TogglePin(GPIOA, red_led_odrain_Pin);
            //HAL_GPIO_TogglePin(GPIOA, extern_watchdog_Pin);
            osDelay(400);
        }

        /* Turn off led */
        uint8_t message[] = "Hello from red led thread\r\n";
        HAL_GPIO_WritePin(GPIOA, red_led_odrain_Pin, GPIO_PIN_SET);
        HAL_UART_Transmit(&huart1, message, strlen((const char *)message), 500);

        osDelay(500);
        //HAL_GPIO_TogglePin(GPIOA, extern_watchdog_Pin);
        osDelay(500);
        //HAL_GPIO_TogglePin(GPIOA, extern_watchdog_Pin);
        osDelay(500);
        //HAL_GPIO_TogglePin(GPIOA, extern_watchdog_Pin);
        osDelay(500);
        //HAL_GPIO_TogglePin(GPIOA, extern_watchdog_Pin);

    }
}

#ifdef USE_FULL_ASSERT

/**
   * @brief Reports the name of the source file and the source line number
   * where the assert_param error has occurred.
   * @param file: pointer to the source file name
   * @param line: assert_param error line source number
   * @retval None
   */
void assert_failed(uint8_t* file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */

}

#endif

/**
  * @}
  */ 

/**
  * @}
*/ 

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
